"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.triggeredByNewComment = exports.hasNonInstructionsReply = exports.hasReplies = exports.exceedsDaysUntilStale = exports.containsKeyword = exports.hasReaction = exports.containsNegativeReaction = exports.containsPositiveReaction = exports.isNegativeReaction = exports.isPositiveReaction = exports.daysSinceComment = void 0;
const github = require("@actions/github");
const graphql_1 = require("./generated/graphql");
function daysSinceComment(comment) {
    const currentDate = new Date();
    const commentDate = new Date(comment.node?.updatedAt.toString());
    const diffInMs = currentDate.getTime() - commentDate.getTime();
    const diffInDays = diffInMs / (1000 * 3600 * 24);
    return diffInDays;
}
exports.daysSinceComment = daysSinceComment;
function isPositiveReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsUp) || (content === graphql_1.ReactionContent.Heart) || (content === graphql_1.ReactionContent.Hooray) || (content === graphql_1.ReactionContent.Laugh) || (content === graphql_1.ReactionContent.Rocket));
}
exports.isPositiveReaction = isPositiveReaction;
function isNegativeReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsDown) || (content === graphql_1.ReactionContent.Confused));
}
exports.isNegativeReaction = isNegativeReaction;
function containsPositiveReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => {
        return isPositiveReaction(reaction?.content);
    });
}
exports.containsPositiveReaction = containsPositiveReaction;
function containsNegativeReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => {
        return isNegativeReaction(reaction?.content);
    });
}
exports.containsNegativeReaction = containsNegativeReaction;
function hasReaction(comment) {
    return comment?.node?.reactions.nodes?.length !== 0;
}
exports.hasReaction = hasReaction;
function containsKeyword(comment, text) {
    return comment?.node?.bodyText?.indexOf(text) >= 0;
}
exports.containsKeyword = containsKeyword;
function exceedsDaysUntilStale(comment, staleTimeDays) {
    return (daysSinceComment(comment) >= staleTimeDays);
}
exports.exceedsDaysUntilStale = exceedsDaysUntilStale;
function hasReplies(comment) {
    return comment.node?.replies.edges?.some(reply => {
        return (reply?.node?.bodyText.length !== 0);
    });
}
exports.hasReplies = hasReplies;
function hasNonInstructionsReply(comments, INSTRUCTIONS_TEXT) {
    return comments.node?.replies.edges?.some(comment => {
        return comment?.node?.bodyText?.indexOf(INSTRUCTIONS_TEXT) < 0;
    });
}
exports.hasNonInstructionsReply = hasNonInstructionsReply;
function triggeredByNewComment() {
    if (github.context.eventName === 'discussion_comment' && github.context.payload.action === 'created') {
        return true;
    }
    else {
        return false;
    }
}
exports.triggeredByNewComment = triggeredByNewComment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDBDQUEwQztBQUMxQyxpREFBMEc7QUFFMUcsU0FBZ0IsZ0JBQWdCLENBQUMsT0FBOEI7SUFDN0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDL0QsTUFBTSxVQUFVLEdBQUcsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBTkQsNENBTUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxPQUF3QjtJQUN6RCxPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDaE4sQ0FBQztBQUZELGdEQUVDO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUMsT0FBd0I7SUFDekQsT0FBTyxDQUFDLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUFGRCxnREFFQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLE9BQThCO0lBQ3JFLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNwRCxPQUFPLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxPQUFRLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUUsQ0FBQztBQUNOLENBQUM7QUFKRCw0REFJQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLE9BQThCO0lBQ3JFLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNwRCxPQUFPLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxPQUFRLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUUsQ0FBQztBQUNOLENBQUM7QUFKRCw0REFJQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxPQUE4QjtJQUN4RCxPQUFPLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCxrQ0FFQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxPQUE4QixFQUFFLElBQVk7SUFDMUUsT0FBTyxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCwwQ0FFQztBQUVELFNBQWdCLHFCQUFxQixDQUFDLE9BQThCLEVBQUUsYUFBcUI7SUFDekYsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCxzREFFQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxPQUE4QjtJQUN2RCxPQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUUsQ0FBQztBQUNOLENBQUM7QUFKRCxnQ0FJQztBQUVELFNBQWdCLHVCQUF1QixDQUFDLFFBQStCLEVBQUUsaUJBQXlCO0lBQ2hHLE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNsRCxPQUFPLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBRSxHQUFHLENBQUMsQ0FBQztJQUNsRSxDQUFDLENBQUUsQ0FBQztBQUNOLENBQUM7QUFKRCwwREFJQztBQUVELFNBQWdCLHFCQUFxQjtJQUNuQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxLQUFLLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7UUFDcEcsT0FBTyxJQUFJLENBQUM7S0FDYjtTQUFNO1FBQ0wsT0FBTyxLQUFLLENBQUM7S0FDZDtBQUNILENBQUM7QUFORCxzREFNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG9jdG9raXQgZnJvbSBcIkBvY3Rva2l0L2dyYXBocWwtc2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBnaXRodWIgZnJvbSBcIkBhY3Rpb25zL2dpdGh1YlwiO1xuaW1wb3J0IHsgRGlzY3Vzc2lvbkNvbW1lbnRDb25uZWN0aW9uLCBEaXNjdXNzaW9uQ29tbWVudEVkZ2UsIFJlYWN0aW9uQ29udGVudCB9IGZyb20gXCIuL2dlbmVyYXRlZC9ncmFwaHFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzU2luY2VDb21tZW50KGNvbW1lbnQ6IERpc2N1c3Npb25Db21tZW50RWRnZSk6IG51bWJlciB7XG4gIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcbiAgY29uc3QgY29tbWVudERhdGUgPSBuZXcgRGF0ZShjb21tZW50Lm5vZGU/LnVwZGF0ZWRBdC50b1N0cmluZygpKTtcbiAgY29uc3QgZGlmZkluTXMgPSBjdXJyZW50RGF0ZS5nZXRUaW1lKCkgLSBjb21tZW50RGF0ZS5nZXRUaW1lKCk7XG4gIGNvbnN0IGRpZmZJbkRheXMgPSBkaWZmSW5NcyAvICgxMDAwICogMzYwMCAqIDI0KTtcbiAgcmV0dXJuIGRpZmZJbkRheXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Bvc2l0aXZlUmVhY3Rpb24oY29udGVudDogUmVhY3Rpb25Db250ZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiAoKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5UaHVtYnNVcCkgfHwgKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5IZWFydCkgfHwgKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5Ib29yYXkpIHx8IChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuTGF1Z2gpIHx8IChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuUm9ja2V0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05lZ2F0aXZlUmVhY3Rpb24oY29udGVudDogUmVhY3Rpb25Db250ZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiAoKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5UaHVtYnNEb3duKSB8fCAoY29udGVudCA9PT0gUmVhY3Rpb25Db250ZW50LkNvbmZ1c2VkKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc1Bvc2l0aXZlUmVhY3Rpb24oY29tbWVudDogRGlzY3Vzc2lvbkNvbW1lbnRFZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8uc29tZShyZWFjdGlvbiA9PiB7XG4gICAgcmV0dXJuIGlzUG9zaXRpdmVSZWFjdGlvbihyZWFjdGlvbj8uY29udGVudCEpO1xuICB9KSE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc05lZ2F0aXZlUmVhY3Rpb24oY29tbWVudDogRGlzY3Vzc2lvbkNvbW1lbnRFZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8uc29tZShyZWFjdGlvbiA9PiB7XG4gICAgcmV0dXJuIGlzTmVnYXRpdmVSZWFjdGlvbihyZWFjdGlvbj8uY29udGVudCEpO1xuICB9KSE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNSZWFjdGlvbihjb21tZW50OiBEaXNjdXNzaW9uQ29tbWVudEVkZ2UpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNvbW1lbnQ/Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8ubGVuZ3RoICE9PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNLZXl3b3JkKGNvbW1lbnQ6IERpc2N1c3Npb25Db21tZW50RWRnZSwgdGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50Py5ub2RlPy5ib2R5VGV4dD8uaW5kZXhPZih0ZXh0KSEgPj0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4Y2VlZHNEYXlzVW50aWxTdGFsZShjb21tZW50OiBEaXNjdXNzaW9uQ29tbWVudEVkZ2UsIHN0YWxlVGltZURheXM6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gKGRheXNTaW5jZUNvbW1lbnQoY29tbWVudCkgPj0gc3RhbGVUaW1lRGF5cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNSZXBsaWVzKGNvbW1lbnQ6IERpc2N1c3Npb25Db21tZW50RWRnZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gY29tbWVudC5ub2RlPy5yZXBsaWVzLmVkZ2VzPy5zb21lKHJlcGx5ID0+IHtcbiAgICByZXR1cm4gKHJlcGx5Py5ub2RlPy5ib2R5VGV4dC5sZW5ndGggIT09IDApO1xuICB9KSE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNOb25JbnN0cnVjdGlvbnNSZXBseShjb21tZW50czogRGlzY3Vzc2lvbkNvbW1lbnRFZGdlLCBJTlNUUlVDVElPTlNfVEVYVDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50cy5ub2RlPy5yZXBsaWVzLmVkZ2VzPy5zb21lKGNvbW1lbnQgPT4ge1xuICAgIHJldHVybiBjb21tZW50Py5ub2RlPy5ib2R5VGV4dD8uaW5kZXhPZihJTlNUUlVDVElPTlNfVEVYVCkhIDwgMDtcbiAgfSkhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlcmVkQnlOZXdDb21tZW50KCkge1xuICBpZiAoZ2l0aHViLmNvbnRleHQuZXZlbnROYW1lID09PSAnZGlzY3Vzc2lvbl9jb21tZW50JyAmJiBnaXRodWIuY29udGV4dC5wYXlsb2FkLmFjdGlvbiA9PT0gJ2NyZWF0ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXX0=